#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility

unless File.exists?(File.expand_path '../../.git', __FILE__)
  ENV['RAILS_ENV'] = 'production'
end

unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end

# unit test sets up rails app, so don't initialize it if it's already loaded
if require File.expand_path('../../config/application',  __FILE__)
  Lifetracker::Application.initialize!
end

# We configure rails to eastern timezone; make Chronic aware
Chronic.time_class = Time.zone

#$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'gli'
require 'lifetracker_version'
require 'tempfile'

include GLI

program_desc 'Describe your application here'

version Lifetracker::VERSION

#desc 'Describe some switch here'
#switch [:s,:switch]

#desc 'Describe some flag here'
#default_value 'the default'
#arg_name 'The name of the argument'
#flag [:f,:flagname]

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

desc 'Add an activity'
command :add do |c|
  c.action do |global,command,options,args|
    start_at, end_at, category, memo = options
    start_at = Chronic.parse(start_at)
    end_at = Chronic.parse(end_at)
    day = Day.find_or_create_by_dt(start_at.to_date)
    Activity.create!(:day => day, :start_at => start_at, :end_at => end_at, :category => Category.find_by_abbr(category), :memo => memo)
    puts 'Added activity'
    Activity.order(:start_at).all.each {|activity| activity.inspect}
  end
end

desc 'Edit a day'
command :edit do |c|
  c.action do |global,command,options,args|
    day = Day.find_or_create_by_dt(Date.today)
    tf = Tempfile.new 'lifetracker'
    
    tf.write day.to_s
    tf.close

    system(ENV['EDITOR'], tf.path)

    tf.open
    edited = tf.read
    puts day.parse(edited)
  end
end

exit GLI.run(ARGV) unless Rails.env.test? 
